Shader "MyCustom/Chapter12_BasicShape"
{
    Properties
    {
        _Radius             ("_Radius",             Float) = 1
        _Width              ("_Width",              Float) = 1
        _Height             ("_Height",             Float) = 1
        _PaddingX           ("_PaddingX",           Float) = 0.2
        _PaddingY           ("_PaddingY",           Float) = 0.2
        _Slope              ("_Slope",              Float) = 0
        _Offset             ("_Offset",             Vector) = (0, 0, 1, 1)
        _LineWidth          ("_LineWidth",          Float) = 0.2
        _Power              ("_Power",              Float) = 0
        _Sides              ("_Sides",              Float) = 0
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 100

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #pragma shader_feature MYCUSTOM_ELLIPSE MYCUSTOM_RECTANGLE MYCUSTOM_ROUNDEDRECTANGLE MYCUSTOM_LINE MYCUSTOM_POLYGON MYCUSTOM_HEART

            #include "UnityCG.cginc"
            #define PI 3.14159265359

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };

            float _Radius;
            float _Width;
            float _Height;

            float _PaddingX;
            float _PaddingY;
            float _Slope;
            float4 _Offset;

            float _LineWidth;
            float _Power;
            float _Sides;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                return o;
            }

            float _circle(float2 uv)
            {
                float2 _uv = uv * 2 - 1;
                float r = length(_uv) / _Radius;

                float col = step(r, 0.5);
                return col;
            }

            float _ellipse(float2 uv)
            {
                float2 _uv = uv * 2 - 1;
                float r = length(_uv / float2(_Width, _Height));

                float col = step(r, 0.5);
                return col;
            }

            float _rectangle(float2 uv)
            {
                float2 _uv = abs(uv * 2 - 1);
                _uv = _uv / float2(_Width, _Height);
                
                _uv = step(_uv, 0.5);
                float col = min(_uv.x, _uv.y);
                return col;
            }

            float _rectangle2(float2 uv)
            {   
                // 左下
                float p0 = 1 - step(uv.x, _PaddingX + uv.y * _Slope + _Offset.x);
                
                // 左上
                float p1 = step(uv.x, 1 - _PaddingX + uv.y * _Slope + _Offset.x);

                // 右下
                float p2 = 1 - step(uv.y, _PaddingY);

                // 右上
                float p3 = step(uv.y, 1 - _PaddingY);

                float col = p0 * p1 * p2 * p3;

                return col;
            }

            float _roundedRectangle(float2 uv)
            {
                float2 _uv = abs(uv - float2(0.5, 0.5)) / float2(_Width, _Height);
                float2 uv2 = _uv - float2(0.5 - _Radius, 0.5 - _Radius);
                uv2 = float2(max(0, uv2.x), max(0, uv2.y));

                float col = length(uv2) > _Radius ? 0 : 1;

                return col;
            }

            float _line(float2 uv)
            {
                float2 _uv = uv;

                _uv.y -= 0.5;

                float k = pow(_uv.x, _Power);
                _uv.y = k * _uv.x + _uv.y;
                float col = step(_uv.y, 0.5 + _LineWidth / 2) - step(_uv.y, 0.5 - _LineWidth / 2);

                return col;
            }

            float _polygon(float2 uv)
            {
                float2 _uv = (uv * 2 - 1)/ float2(_Width, _Height);

                // value range: (-PI, PI)
                float angle = atan2(_uv.x, _uv.y);
                float radius = length(_uv);
                float a = 2 * PI / _Sides;

                // floor: 返回 小于或者等于x的最大整数
                float distance = cos(floor(0.5 + angle / a) * a - angle) * radius;
                float col = step(distance, 0.5);

                return col;
            }

            float _heart(float2 uv)
            {
                float2 _uv = uv * 2 - 1;

                _uv = (_uv - float2(_Offset.x, _Offset.y)) * float2(_Offset.z, _Offset.w);

                float col = pow(_uv.x, 2) + pow(_uv.y - sqrt(abs(_uv.x)), 2);
                col = step(col, 0.5);

                return col;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                fixed4 col = 1;

#ifdef MYCUSTOM_ELLIPSE
                col = _ellipse(i.uv);
#elif MYCUSTOM_RECTANGLE
                col = _rectangle2(i.uv);
#elif MYCUSTOM_ROUNDEDRECTANGLE
                col = _roundedRectangle(i.uv);
#elif MYCUSTOM_LINE
                col = _line(i.uv);
#elif MYCUSTOM_POLYGON
                col = _polygon(i.uv);
#elif MYCUSTOM_HEART
                col = _heart(i.uv);
#else
                col = float4(1, 0, 1, 1);
#endif

                return col;
            }
            ENDCG
        }
    }
    CustomEditor "GUIExtension.MyCustomBasicShapeShaderGUI"
}
